{"ast":null,"code":"var _jsxFileName = \"D:\\\\EPAM\\\\Gd-FD3-22-25_Bolbotunov\\\\hw2-attendance-chart\\\\src\\\\components\\\\CreateTable.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport CreateCell from './CreateCell';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateTable() {\n  _s();\n  const getDates = (() => {\n    const datesArray = ['names / dates'];\n    let today = new Date();\n    for (let i = 0; i < 5; i++) {\n      let newDay = new Date(today);\n      newDay.setDate(today.getDate() + i);\n      const year = newDay.getFullYear();\n      const month = (newDay.getMonth() + 1).toString().padStart(2, '0');\n      const day = newDay.getDate().toString().padStart(2, '0');\n      datesArray.push(`${day}/${month}/${year}`);\n    }\n    return datesArray;\n  })();\n  const LOCAL_STORAGE_KEY = 'PASS';\n  const [students, setStudents] = useState(() => {\n    const storedStudents = localStorage.getItem(LOCAL_STORAGE_KEY);\n    return storedStudents ? JSON.parse(storedStudents) : [];\n  });\n  const [studentsList, setStudentsList] = useState([]);\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(students));\n  }, [students]);\n  function showStudents() {\n    try {\n      const storedStudents = localStorage.getItem(LOCAL_STORAGE_KEY);\n      if (storedStudents) {\n        setStudentsList(JSON.parse(storedStudents));\n      }\n    } catch (error) {\n      console.error('Ошибка при получении студентов', error);\n    }\n  }\n  useEffect(() => {\n    showStudents();\n  }, []); // Выполняем один раз при монтировании компонента\n\n  function addStudent() {\n    const studentName = prompt('Enter student name');\n    if (studentName) {\n      setStudents(prev => [...prev, studentName]);\n      showStudents(); // Обновляем список студентов после добавления\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: getDates.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), studentsList.map((student, sindex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cell\",\n          id: \"1\",\n          children: student\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), Array.from({\n          length: 5\n        }).map((_, index) => /*#__PURE__*/_jsxDEV(CreateCell, {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this))]\n      }, sindex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: addStudent,\n          children: \"Add student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          children: \"Add date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(CreateTable, \"5AEReM0nqGSNzMgLHMaDA1skjKI=\");\n_c = CreateTable;\nvar _c;\n$RefreshReg$(_c, \"CreateTable\");","map":{"version":3,"names":["useState","useEffect","CreateCell","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateTable","_s","getDates","datesArray","today","Date","i","newDay","setDate","getDate","year","getFullYear","month","getMonth","toString","padStart","day","push","LOCAL_STORAGE_KEY","students","setStudents","storedStudents","localStorage","getItem","JSON","parse","studentsList","setStudentsList","setItem","stringify","showStudents","error","console","addStudent","studentName","prompt","prev","children","className","map","item","index","fileName","_jsxFileName","lineNumber","columnNumber","student","sindex","id","Array","from","length","_","style","padding","onClick","_c","$RefreshReg$"],"sources":["D:/EPAM/Gd-FD3-22-25_Bolbotunov/hw2-attendance-chart/src/components/CreateTable.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport CreateCell from './CreateCell';\r\n\r\nexport default function CreateTable() {\r\n    const getDates = (() => {\r\n        const datesArray = ['names / dates'];\r\n        let today = new Date();\r\n        for (let i = 0; i < 5; i++) {\r\n            let newDay = new Date(today);\r\n            newDay.setDate(today.getDate() + i);\r\n            const year = newDay.getFullYear();\r\n            const month = (newDay.getMonth() + 1).toString().padStart(2, '0');\r\n            const day = newDay.getDate().toString().padStart(2, '0');\r\n            datesArray.push(`${day}/${month}/${year}`);\r\n        }\r\n        return datesArray;\r\n    })();\r\n\r\n    type StudentsList = string[];\r\n    const LOCAL_STORAGE_KEY = 'PASS';\r\n    const [students, setStudents] = useState<StudentsList>(() => {\r\n        const storedStudents = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n        return storedStudents ? JSON.parse(storedStudents) : [];\r\n    });\r\n\r\n    const [studentsList, setStudentsList] = useState<StudentsList>([]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(students));\r\n    }, [students]);\r\n\r\n    function showStudents() {\r\n        try {\r\n            const storedStudents = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n            if (storedStudents) {\r\n                setStudentsList(JSON.parse(storedStudents));\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении студентов', error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        showStudents();\r\n    }, []); // Выполняем один раз при монтировании компонента\r\n\r\n    function addStudent() {\r\n        const studentName = prompt('Enter student name');\r\n        if (studentName) {\r\n            setStudents(prev => [...prev, studentName]);\r\n            showStudents(); // Обновляем список студентов после добавления\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrapper flex\">\r\n                <div className='row'>\r\n                    {getDates.map((item, index) => (\r\n                        <div className='cell' key={index}>{item}</div>\r\n                    ))}\r\n                </div>\r\n\r\n                {studentsList.map((student, sindex) => (\r\n                    <div className='row' key={sindex}>\r\n                        <div className='cell' id='1'>{student}</div>\r\n                        {Array.from({ length: 5 }).map((_, index) => (\r\n                            <CreateCell key={index} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n\r\n                <div style={{ padding: '20px' }}>\r\n                    <button className='btn' onClick={addStudent}>Add student</button>\r\n                    <button className='btn'>Add date</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAG,CAAC,MAAM;IACpB,MAAMC,UAAU,GAAG,CAAC,eAAe,CAAC;IACpC,IAAIC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,IAAIC,MAAM,GAAG,IAAIF,IAAI,CAACD,KAAK,CAAC;MAC5BG,MAAM,CAACC,OAAO,CAACJ,KAAK,CAACK,OAAO,CAAC,CAAC,GAAGH,CAAC,CAAC;MACnC,MAAMI,IAAI,GAAGH,MAAM,CAACI,WAAW,CAAC,CAAC;MACjC,MAAMC,KAAK,GAAG,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACjE,MAAMC,GAAG,GAAGT,MAAM,CAACE,OAAO,CAAC,CAAC,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACxDZ,UAAU,CAACc,IAAI,CAAC,GAAGD,GAAG,IAAIJ,KAAK,IAAIF,IAAI,EAAE,CAAC;IAC9C;IACA,OAAOP,UAAU;EACrB,CAAC,EAAE,CAAC;EAGJ,MAAMe,iBAAiB,GAAG,MAAM;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAe,MAAM;IACzD,MAAM4B,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACL,iBAAiB,CAAC;IAC9D,OAAOG,cAAc,GAAGG,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,GAAG,EAAE;EAC3D,CAAC,CAAC;EAEF,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAe,EAAE,CAAC;EAElEC,SAAS,CAAC,MAAM;IACZ4B,YAAY,CAACM,OAAO,CAACV,iBAAiB,EAAEM,IAAI,CAACK,SAAS,CAACV,QAAQ,CAAC,CAAC;EACrE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,SAASW,YAAYA,CAAA,EAAG;IACpB,IAAI;MACA,MAAMT,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACL,iBAAiB,CAAC;MAC9D,IAAIG,cAAc,EAAE;QAChBM,eAAe,CAACH,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;MAC/C;IACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ;EAEArC,SAAS,CAAC,MAAM;IACZoC,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,SAASG,UAAUA,CAAA,EAAG;IAClB,MAAMC,WAAW,GAAGC,MAAM,CAAC,oBAAoB,CAAC;IAChD,IAAID,WAAW,EAAE;MACbd,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,WAAW,CAAC,CAAC;MAC3CJ,YAAY,CAAC,CAAC,CAAC,CAAC;IACpB;EACJ;EAEA,oBACIjC,OAAA,CAAAE,SAAA;IAAAsC,QAAA,eACIxC,OAAA;MAAKyC,SAAS,EAAC,cAAc;MAAAD,QAAA,gBACzBxC,OAAA;QAAKyC,SAAS,EAAC,KAAK;QAAAD,QAAA,EACfnC,QAAQ,CAACqC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACtB5C,OAAA;UAAKyC,SAAS,EAAC,MAAM;UAAAD,QAAA,EAAcG;QAAI,GAAZC,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAChD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,EAELnB,YAAY,CAACa,GAAG,CAAC,CAACO,OAAO,EAAEC,MAAM,kBAC9BlD,OAAA;QAAKyC,SAAS,EAAC,KAAK;QAAAD,QAAA,gBAChBxC,OAAA;UAAKyC,SAAS,EAAC,MAAM;UAACU,EAAE,EAAC,GAAG;UAAAX,QAAA,EAAES;QAAO;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC3CI,KAAK,CAACC,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC,CAACZ,GAAG,CAAC,CAACa,CAAC,EAAEX,KAAK,kBACpC5C,OAAA,CAACF,UAAU,MAAM8C,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAC5B,CAAC;MAAA,GAJoBE,MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAK3B,CACR,CAAC,eAEFhD,OAAA;QAAKwD,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAO,CAAE;QAAAjB,QAAA,gBAC5BxC,OAAA;UAAQyC,SAAS,EAAC,KAAK;UAACiB,OAAO,EAAEtB,UAAW;UAAAI,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjEhD,OAAA;UAAQyC,SAAS,EAAC,KAAK;UAAAD,QAAA,EAAC;QAAQ;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACR,CAAC;AAEX;AAAC5C,EAAA,CA5EuBD,WAAW;AAAAwD,EAAA,GAAXxD,WAAW;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}